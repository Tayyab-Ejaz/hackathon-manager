= render "layouts/manage/page_title", title: t(:title, scope: 'pages.manage.settings')

.row
  .col-lg-6.mb-3
    .card.mb-3
      .card-body
        %h4.card-title.font-weight-bold
          The Basics
        %h6.card-subtitle.mb-2.text-muted
          Core information about your hackathon.
        - @basics.each_entry do |key|
          - value = HackathonConfig[key]
          %hr
          %p.mb-1
            = link_to edit_manage_config_path(key), class: 'icon-space-r' do
              %span.fa.fa-pencil
            %b
              = t("simple_form.labels.hackathon_config.#{key}")
          %p.text-muted= t("simple_form.hints.hackathon_config.#{key}").html_safe
          - if value.nil? || value == ''
            %p.mb-0
              %span.badge.badge-secondary Not set
          - else
            %pre.mb-0= value
            - if value.is_a?(String)
              - images = ['.ico', '.jpg', '.jpeg', '.png', '.gif', '.svg'].freeze
              - links = ['http://', 'https://'].freeze
              - if value.end_with?(*images)
                %br
                = image_tag value, style: 'max-height: 100px;', class: 'img-thumbnail img-template'
              - elsif value.start_with?(*links)
                %br
                = link_to value, target: 'blank' do
                  %span
                    %span.fa.fa-external-link.icon-space-r-half
                    Open link
    .card.mb-3
      .card-body
        %h4.card-title.font-weight-bold
          Applying to
          = HackathonConfig['name']
        %h6.card-subtitle.mb-2.text-muted
          Configuring questionnaires for your hackathon.
        - @questionnaire_settings.each_entry do |key|
          - value = HackathonConfig[key]
          %hr
          %p.mb-1
            = link_to edit_manage_config_path(key), class: 'icon-space-r' do
              %span.fa.fa-pencil
            %b
              = t("simple_form.labels.hackathon_config.#{key}")
          %p.text-muted= t("simple_form.hints.hackathon_config.#{key}").html_safe
          - if key == 'disabled_fields'
            - cleaned_value = value
            - cleaned_value = cleaned_value.join(' ') if cleaned_value.is_a?(Array)
            - if cleaned_value.blank?
              %p.mb-0
                %span.badge.badge-secondary Not set
            - else
              %pre.mb-0= cleaned_value
          - elsif value.nil? || value == ''
            %p.mb-0
              %span.badge.badge-secondary Not set
          - else
            %pre.mb-0= value
            - if value.is_a?(String)
              - images = ['.ico', '.jpg', '.jpeg', '.png', '.gif', '.svg'].freeze
              - links = ['http://', 'https://'].freeze
              - if value.end_with?(*images)
                %br
                = image_tag value, style: 'max-height: 100px;', class: 'img-thumbnail img-template'
              - elsif value.start_with?(*links)
                %br
                = link_to value, target: 'blank' do
                  %span
                    %span.fa.fa-external-link.icon-space-r-half
                    Open link
    .card.mb-3
      .card-body
        %h4.card-title.font-weight-bold
          Styling for
          = HackathonConfig['name']
        %h6.card-subtitle.mb-2.text-muted
          Matching your hackathon's style.
        - @styling.each_entry do |key|
          - value = HackathonConfig[key]
          %hr
          %p.mb-1
            = link_to edit_manage_config_path(key), class: 'icon-space-r' do
              %span.fa.fa-pencil
            %b
              = t("simple_form.labels.hackathon_config.#{key}")
          %p.text-muted= t("simple_form.hints.hackathon_config.#{key}").html_safe
          - if key == 'custom_css'
            %p
              = link_to enter_theming_editor_manage_configs_path do
                %span.fa.fa-paint-brush.icon-space-r-half
                Interactive editor
          - if value.nil? || value == ''
            %p.mb-0
              %span.badge.badge-secondary Not set
          - else
            %pre.mb-0= value
            - if value.is_a?(String)
              - images = ['.ico', '.jpg', '.jpeg', '.png', '.gif', '.svg'].freeze
              - links = ['http://', 'https://'].freeze
              - if value.end_with?(*images)
                %br
                = image_tag value, style: 'max-height: 100px;', class: 'img-thumbnail img-template'
              - elsif value.start_with?(*links)
                %br
                = link_to value, target: 'blank' do
                  %span
                    %span.fa.fa-external-link.icon-space-r-half
                    Open link

  .col-lg-6
    .card.mb-3
      .card-body
        %h4.card-title.font-weight-bold
          Communications
        %h6.card-subtitle.mb-2.text-muted
          Get the word out.
        - @communications.each_entry do |key|
          - value = HackathonConfig[key]
          %hr
          %p.mb-1
            = link_to edit_manage_config_path(key), class: 'icon-space-r' do
              %span.fa.fa-pencil
            %b
              = t("simple_form.labels.hackathon_config.#{key}")
          %p.text-muted= t("simple_form.hints.hackathon_config.#{key}").html_safe
          - if value.nil? || value == ''
            %p.mb-0
              %span.badge.badge-secondary Not set
          - else
            %pre.mb-0= value
            - if value.is_a?(String)
              - images = ['.ico', '.jpg', '.jpeg', '.png', '.gif', '.svg'].freeze
              - links = ['http://', 'https://'].freeze
              - if value.end_with?(*images)
                %br
                = image_tag value, style: 'max-height: 100px;', class: 'img-thumbnail img-template'
              - elsif value.start_with?(*links)
                %br
                = link_to value, target: 'blank' do
                  %span
                    %span.fa.fa-external-link.icon-space-r-half
                    Open link
    .mb-3
      .card.mb-3
        .card-body
          %h4.card-title.font-weight-bold
            Environment Variables
          %h6.card-subtitle.mb-2.text-muted
            Environment variables are configured on the production server.
          = render 'docs_link', title: 'Environment variable documentation', url: 'https://coderit.org/hackathon-manager/docs/deployment-environment-variables'
          %hr
          = render 'config_row', name: 'AWS S3 Bucket for Resumes', key: 'AWS_BUCKET'
          = render 'config_row', name: 'AWS S3 Region', key: 'AWS_REGION'
          = render 'config_row', name: 'AWS S3 Access Key ID', key: 'AWS_ACCESS_KEY_ID'
          = render 'config_row', name: 'AWS S3 Secret Access Key', key: 'AWS_SECRET_ACCESS_KEY', secret: true
          = render 'config_row', name: 'AWS S3 Endpoint', key: 'AWS_ENDPOINT', required: false
          %hr
          = render 'config_row', name: 'Domain Name', key: 'HM_DOMAIN_NAME'
          = render 'config_row', name: 'Domain Protocol', key: 'HM_DOMAIN_PROTOCOL', default: 'https'
          %hr
          = render 'config_row', name: 'My MLH Application ID', key: 'MLH_KEY'
          = render 'config_row', name: 'My MLH Secret', key: 'MLH_SECRET', secret: true
          %hr
          = render 'config_row', name: 'Rollbar Access Token', key: 'ROLLBAR_ACCESS_TOKEN', secret: true, required: false
          %hr
          = render 'config_row', name: 'Time Zone', key: 'TIME_ZONE', default: 'UTC', required: false
          %hr
          %p.mb-0
            %b Email Provider
          - if Rails.application.config.action_mailer.delivery_method == :smtp
            %p
              %span.badge.badge-secondary SendGrid
              %span.badge.badge-success SMTP
              %br
              %small
                %i To switch to SendGrid, unset the <code>SMTP_ADDRESS</code> environment variable
            = render 'config_row', name: 'SMTP Address', key: 'SMTP_ADDRESS'
            = render 'config_row', name: 'SMTP Port', key: 'SMTP_PORT', default: 587
            = render 'config_row', name: 'SMTP Username', key: 'SMTP_USER_NAME', secret: true
            = render 'config_row', name: 'SMTP Password', key: 'SMTP_PASSWORD', secret: true
          - else
            %p
              %span.badge.badge-success SendGrid
              %span.badge.badge-secondary SMTP
              %br
              %small
                %i To switch to SMTP, set the <code>SMTP_ADDRESS</code> environment variable
            = render 'config_row', name: 'SendGrid API Key', key: 'SENDGRID_API_KEY', secret: true

    .card.mb-3
      .card-body
        %h4.card-title.font-weight-bold
          Reset
          = HackathonConfig['name']
        %h6.card-subtitle.mb-2.text-muted
          This will delete all users and questionnaires for the selected roles
        %button.btn.btn-danger{"data-toggle"=>"modal", "data-target"=>"#reset_modal"} Reset Hackathon

.modal{:id=>"reset_modal"}
  .modal-dialog
    .modal-content
      .modal-header
        %h5.modal-title Are you sure you want to do this?
        %button.close{:type=>"button", "data-dismiss"=>"modal", "aria-label"=>"Close"}
          %span{"aria-hidden"=>"true"} &times;
      .modal-body
        %p This action is irreversible. This will delete all the questionnaires and user accounts for the roles selected
        = form_for :hackathonReset, url:"configs/reset_hackathon" do |f|
          .form-check
            = f.check_box :users, class: "form-check-input"
            = f.label :users, "Users", class: "form-check-label"
          .form-check
            = f.check_box :volunteers, class: "form-check-input"
            = f.label :volunteers, "Volunteers", class: "form-check-label"
          .form-check
            = f.check_box :organizer, class: "form-check-input"
            = f.label :organizer, "Organizer", class: "form-check-label"
          .form-check
            = f.check_box :directors, class: "form-check-input"
            = f.label :directors, "Directors", class: "form-check-label"
          .form-group
            = f.label :hackName, "Type \"Reset Hackathon\" to reset #{HackathonConfig['name']}"
            = f.text_field :hackName, class: "form-control w-100", id: "resetText"

          %p.center
            = f.submit "Reset", disabled: true, class:"btn btn-danger w-100", id: "resetButton"
